// Code generated by "enumer -type=PlacementPolicy"; DO NOT EDIT.

package topology

import (
	"fmt"
)

const _PlacementPolicyName = "UnknownManualAutoPlaceFollowTopologyBalancedAutoPlaceTopology"

var _PlacementPolicyIndex = [...]uint8{0, 7, 13, 22, 36, 44, 61}

func (i PlacementPolicy) String() string {
	if i < 0 || i >= PlacementPolicy(len(_PlacementPolicyIndex)-1) {
		return fmt.Sprintf("PlacementPolicy(%d)", i)
	}
	return _PlacementPolicyName[_PlacementPolicyIndex[i]:_PlacementPolicyIndex[i+1]]
}

var _PlacementPolicyValues = []PlacementPolicy{0, 1, 2, 3, 4, 5}

var _PlacementPolicyNameToValueMap = map[string]PlacementPolicy{
	_PlacementPolicyName[0:7]:   0,
	_PlacementPolicyName[7:13]:  1,
	_PlacementPolicyName[13:22]: 2,
	_PlacementPolicyName[22:36]: 3,
	_PlacementPolicyName[36:44]: 4,
	_PlacementPolicyName[44:61]: 5,
}

// PlacementPolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlacementPolicyString(s string) (PlacementPolicy, error) {
	if val, ok := _PlacementPolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PlacementPolicy values", s)
}

// PlacementPolicyValues returns all values of the enum
func PlacementPolicyValues() []PlacementPolicy {
	return _PlacementPolicyValues
}

// IsAPlacementPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PlacementPolicy) IsAPlacementPolicy() bool {
	for _, v := range _PlacementPolicyValues {
		if i == v {
			return true
		}
	}
	return false
}
