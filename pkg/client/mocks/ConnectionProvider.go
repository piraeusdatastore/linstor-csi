// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// ConnectionProvider is an autogenerated mock type for the ConnectionProvider type
type ConnectionProvider struct {
	mock.Mock
}

// GetNodeConnections provides a mock function with given fields: ctx, nodeA, nodeB
func (_m *ConnectionProvider) GetNodeConnections(ctx context.Context, nodeA string, nodeB string) ([]client.Connection, error) {
	ret := _m.Called(ctx, nodeA, nodeB)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeConnections")
	}

	var r0 []client.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]client.Connection, error)); ok {
		return rf(ctx, nodeA, nodeB)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []client.Connection); ok {
		r0 = rf(ctx, nodeA, nodeB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nodeA, nodeB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceConnection provides a mock function with given fields: ctx, resource, nodeA, nodeB
func (_m *ConnectionProvider) GetResourceConnection(ctx context.Context, resource string, nodeA string, nodeB string) (*client.Connection, error) {
	ret := _m.Called(ctx, resource, nodeA, nodeB)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceConnection")
	}

	var r0 *client.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*client.Connection, error)); ok {
		return rf(ctx, resource, nodeA, nodeB)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *client.Connection); ok {
		r0 = rf(ctx, resource, nodeA, nodeB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, resource, nodeA, nodeB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceConnections provides a mock function with given fields: ctx, resource
func (_m *ConnectionProvider) GetResourceConnections(ctx context.Context, resource string) ([]client.Connection, error) {
	ret := _m.Called(ctx, resource)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceConnections")
	}

	var r0 []client.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]client.Connection, error)); ok {
		return rf(ctx, resource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []client.Connection); ok {
		r0 = rf(ctx, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeConnection provides a mock function with given fields: ctx, nodeA, nodeB, props
func (_m *ConnectionProvider) SetNodeConnection(ctx context.Context, nodeA string, nodeB string, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, nodeA, nodeB, props)

	if len(ret) == 0 {
		panic("no return value specified for SetNodeConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, nodeA, nodeB, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResourceConnection provides a mock function with given fields: ctx, resource, nodeA, nodeB, props
func (_m *ConnectionProvider) SetResourceConnection(ctx context.Context, resource string, nodeA string, nodeB string, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, resource, nodeA, nodeB, props)

	if len(ret) == 0 {
		panic("no return value specified for SetResourceConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, resource, nodeA, nodeB, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnectionProvider creates a new instance of ConnectionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionProvider {
	mock := &ConnectionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
