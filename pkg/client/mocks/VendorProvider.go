// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// VendorProvider is an autogenerated mock type for the VendorProvider type
type VendorProvider struct {
	mock.Mock
}

// CreateExosEnclosure provides a mock function with given fields: ctx, enclosure
func (_m *VendorProvider) CreateExosEnclosure(ctx context.Context, enclosure client.ExosEnclosure) error {
	ret := _m.Called(ctx, enclosure)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ExosEnclosure) error); ok {
		r0 = rf(ctx, enclosure)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExosEnclosure provides a mock function with given fields: ctx, name
func (_m *VendorProvider) DeleteExosEnclosure(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExosConnectionMap provides a mock function with given fields: ctx
func (_m *VendorProvider) GetExosConnectionMap(ctx context.Context) (client.ExosConnectionMap, error) {
	ret := _m.Called(ctx)

	var r0 client.ExosConnectionMap
	if rf, ok := ret.Get(0).(func(context.Context) client.ExosConnectionMap); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.ExosConnectionMap)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExosDefaults provides a mock function with given fields: ctx
func (_m *VendorProvider) GetExosDefaults(ctx context.Context) (client.ExosDefaults, error) {
	ret := _m.Called(ctx)

	var r0 client.ExosDefaults
	if rf, ok := ret.Get(0).(func(context.Context) client.ExosDefaults); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.ExosDefaults)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExosEnclosures provides a mock function with given fields: ctx, noCache
func (_m *VendorProvider) GetExosEnclosures(ctx context.Context, noCache bool) ([]client.ExosEnclosure, error) {
	ret := _m.Called(ctx, noCache)

	var r0 []client.ExosEnclosure
	if rf, ok := ret.Get(0).(func(context.Context, bool) []client.ExosEnclosure); ok {
		r0 = rf(ctx, noCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ExosEnclosure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, noCache)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExosEvents provides a mock function with given fields: ctx, name, count
func (_m *VendorProvider) GetExosEvents(ctx context.Context, name string, count int32) ([]client.ExosEnclosureEvent, error) {
	ret := _m.Called(ctx, name, count)

	var r0 []client.ExosEnclosureEvent
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) []client.ExosEnclosureEvent); ok {
		r0 = rf(ctx, name, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ExosEnclosureEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, name, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyExosDefaults provides a mock function with given fields: ctx, defaults
func (_m *VendorProvider) ModifyExosDefaults(ctx context.Context, defaults client.ExosDefaultsModify) error {
	ret := _m.Called(ctx, defaults)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ExosDefaultsModify) error); ok {
		r0 = rf(ctx, defaults)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyExosEnclosure provides a mock function with given fields: ctx, name, enclosure
func (_m *VendorProvider) ModifyExosEnclosure(ctx context.Context, name string, enclosure client.ExosEnclosure) error {
	ret := _m.Called(ctx, name, enclosure)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ExosEnclosure) error); ok {
		r0 = rf(ctx, name, enclosure)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
