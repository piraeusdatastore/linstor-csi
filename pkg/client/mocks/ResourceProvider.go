// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// ResourceProvider is an autogenerated mock type for the ResourceProvider type
type ResourceProvider struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, resName, nodeName
func (_m *ResourceProvider) Activate(ctx context.Context, resName string, nodeName string) error {
	ret := _m.Called(ctx, resName, nodeName)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resName, nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Autoplace provides a mock function with given fields: ctx, resName, apr
func (_m *ResourceProvider) Autoplace(ctx context.Context, resName string, apr client.AutoPlaceRequest) error {
	ret := _m.Called(ctx, resName, apr)

	if len(ret) == 0 {
		panic("no return value specified for Autoplace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.AutoPlaceRequest) error); ok {
		r0 = rf(ctx, resName, apr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, res
func (_m *ResourceProvider) Create(ctx context.Context, res client.ResourceCreate) error {
	ret := _m.Called(ctx, res)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ResourceCreate) error); ok {
		r0 = rf(ctx, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSnapshot provides a mock function with given fields: ctx, snapshot
func (_m *ResourceProvider) CreateSnapshot(ctx context.Context, snapshot client.Snapshot) error {
	ret := _m.Called(ctx, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Snapshot) error); ok {
		r0 = rf(ctx, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deactivate provides a mock function with given fields: ctx, resName, nodeName
func (_m *ResourceProvider) Deactivate(ctx context.Context, resName string, nodeName string) error {
	ret := _m.Called(ctx, resName, nodeName)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resName, nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, resName, nodeName
func (_m *ResourceProvider) Delete(ctx context.Context, resName string, nodeName string) error {
	ret := _m.Called(ctx, resName, nodeName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resName, nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSnapshot provides a mock function with given fields: ctx, resName, snapName, nodes
func (_m *ResourceProvider) DeleteSnapshot(ctx context.Context, resName string, snapName string, nodes ...string) error {
	_va := make([]interface{}, len(nodes))
	for _i := range nodes {
		_va[_i] = nodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, snapName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, resName, snapName, nodes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableDRBDProxy provides a mock function with given fields: ctx, resName, nodeAName, nodeBName
func (_m *ResourceProvider) DisableDRBDProxy(ctx context.Context, resName string, nodeAName string, nodeBName string) error {
	ret := _m.Called(ctx, resName, nodeAName, nodeBName)

	if len(ret) == 0 {
		panic("no return value specified for DisableDRBDProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, resName, nodeAName, nodeBName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Diskful provides a mock function with given fields: ctx, resName, nodeName, storagePoolName, props
func (_m *ResourceProvider) Diskful(ctx context.Context, resName string, nodeName string, storagePoolName string, props *client.ToggleDiskDiskfulProps) error {
	ret := _m.Called(ctx, resName, nodeName, storagePoolName, props)

	if len(ret) == 0 {
		panic("no return value specified for Diskful")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *client.ToggleDiskDiskfulProps) error); ok {
		r0 = rf(ctx, resName, nodeName, storagePoolName, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Diskless provides a mock function with given fields: ctx, resName, nodeName, disklessPoolName
func (_m *ResourceProvider) Diskless(ctx context.Context, resName string, nodeName string, disklessPoolName string) error {
	ret := _m.Called(ctx, resName, nodeName, disklessPoolName)

	if len(ret) == 0 {
		panic("no return value specified for Diskless")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, resName, nodeName, disklessPoolName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableDRBDProxy provides a mock function with given fields: ctx, resName, nodeAName, nodeBName
func (_m *ResourceProvider) EnableDRBDProxy(ctx context.Context, resName string, nodeAName string, nodeBName string) error {
	ret := _m.Called(ctx, resName, nodeAName, nodeBName)

	if len(ret) == 0 {
		panic("no return value specified for EnableDRBDProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, resName, nodeAName, nodeBName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableSnapshotShipping provides a mock function with given fields: ctx, resName, ship
func (_m *ResourceProvider) EnableSnapshotShipping(ctx context.Context, resName string, ship client.SnapshotShipping) error {
	ret := _m.Called(ctx, resName, ship)

	if len(ret) == 0 {
		panic("no return value specified for EnableSnapshotShipping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.SnapshotShipping) error); ok {
		r0 = rf(ctx, resName, ship)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, resName, nodeName, opts
func (_m *ResourceProvider) Get(ctx context.Context, resName string, nodeName string, opts ...*client.ListOpts) (client.Resource, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 client.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) (client.Resource, error)); ok {
		return rf(ctx, resName, nodeName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) client.Resource); ok {
		r0 = rf(ctx, resName, nodeName, opts...)
	} else {
		r0 = ret.Get(0).(client.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, nodeName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, resName, opts
func (_m *ResourceProvider) GetAll(ctx context.Context, resName string, opts ...*client.ListOpts) ([]client.Resource, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []client.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.Resource, error)); ok {
		return rf(ctx, resName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.Resource); ok {
		r0 = rf(ctx, resName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionPropsInfos provides a mock function with given fields: ctx, resName, opts
func (_m *ResourceProvider) GetConnectionPropsInfos(ctx context.Context, resName string, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionPropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, resName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, resName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnections provides a mock function with given fields: ctx, resName, nodeAName, nodeBName, opts
func (_m *ResourceProvider) GetConnections(ctx context.Context, resName string, nodeAName string, nodeBName string, opts ...*client.ListOpts) ([]client.ResourceConnection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, nodeAName, nodeBName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 []client.ResourceConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...*client.ListOpts) ([]client.ResourceConnection, error)); ok {
		return rf(ctx, resName, nodeAName, nodeBName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...*client.ListOpts) []client.ResourceConnection); ok {
		r0 = rf(ctx, resName, nodeAName, nodeBName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ResourceConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, nodeAName, nodeBName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropsInfos provides a mock function with given fields: ctx, resName, opts
func (_m *ResourceProvider) GetPropsInfos(ctx context.Context, resName string, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, resName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, resName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceView provides a mock function with given fields: ctx, opts
func (_m *ResourceProvider) GetResourceView(ctx context.Context, opts ...*client.ListOpts) ([]client.ResourceWithVolumes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceView")
	}

	var r0 []client.ResourceWithVolumes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) ([]client.ResourceWithVolumes, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.ResourceWithVolumes); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ResourceWithVolumes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: ctx, resName, snapName, opts
func (_m *ResourceProvider) GetSnapshot(ctx context.Context, resName string, snapName string, opts ...*client.ListOpts) (client.Snapshot, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, snapName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 client.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) (client.Snapshot, error)); ok {
		return rf(ctx, resName, snapName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) client.Snapshot); ok {
		r0 = rf(ctx, resName, snapName, opts...)
	} else {
		r0 = ret.Get(0).(client.Snapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, snapName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotShippings provides a mock function with given fields: ctx, opts
func (_m *ResourceProvider) GetSnapshotShippings(ctx context.Context, opts ...*client.ListOpts) ([]client.SnapshotShippingStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotShippings")
	}

	var r0 []client.SnapshotShippingStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) ([]client.SnapshotShippingStatus, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.SnapshotShippingStatus); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.SnapshotShippingStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotView provides a mock function with given fields: ctx, opts
func (_m *ResourceProvider) GetSnapshotView(ctx context.Context, opts ...*client.ListOpts) ([]client.Snapshot, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotView")
	}

	var r0 []client.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) ([]client.Snapshot, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.Snapshot); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshots provides a mock function with given fields: ctx, resName, opts
func (_m *ResourceProvider) GetSnapshots(ctx context.Context, resName string, opts ...*client.ListOpts) ([]client.Snapshot, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshots")
	}

	var r0 []client.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.Snapshot, error)); ok {
		return rf(ctx, resName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.Snapshot); ok {
		r0 = rf(ctx, resName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: ctx, resName, nodeName, volNr, opts
func (_m *ResourceProvider) GetVolume(ctx context.Context, resName string, nodeName string, volNr int, opts ...*client.ListOpts) (client.Volume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, nodeName, volNr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolume")
	}

	var r0 client.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, ...*client.ListOpts) (client.Volume, error)); ok {
		return rf(ctx, resName, nodeName, volNr, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, ...*client.ListOpts) client.Volume); ok {
		r0 = rf(ctx, resName, nodeName, volNr, opts...)
	} else {
		r0 = ret.Get(0).(client.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, nodeName, volNr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeDefinitionPropsInfos provides a mock function with given fields: ctx, resName, opts
func (_m *ResourceProvider) GetVolumeDefinitionPropsInfos(ctx context.Context, resName string, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeDefinitionPropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, resName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, resName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumePropsInfos provides a mock function with given fields: ctx, resName, nodeName, opts
func (_m *ResourceProvider) GetVolumePropsInfos(ctx context.Context, resName string, nodeName string, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumePropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, resName, nodeName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, resName, nodeName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, nodeName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumes provides a mock function with given fields: ctx, resName, nodeName, opts
func (_m *ResourceProvider) GetVolumes(ctx context.Context, resName string, nodeName string, opts ...*client.ListOpts) ([]client.Volume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resName, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumes")
	}

	var r0 []client.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) ([]client.Volume, error)); ok {
		return rf(ctx, resName, nodeName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*client.ListOpts) []client.Volume); ok {
		r0 = rf(ctx, resName, nodeName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resName, nodeName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeAvailable provides a mock function with given fields: ctx, resName, nodeName, makeAvailable
func (_m *ResourceProvider) MakeAvailable(ctx context.Context, resName string, nodeName string, makeAvailable client.ResourceMakeAvailable) error {
	ret := _m.Called(ctx, resName, nodeName, makeAvailable)

	if len(ret) == 0 {
		panic("no return value specified for MakeAvailable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.ResourceMakeAvailable) error); ok {
		r0 = rf(ctx, resName, nodeName, makeAvailable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx, resName, fromNodeName, toNodeName, storagePoolName
func (_m *ResourceProvider) Migrate(ctx context.Context, resName string, fromNodeName string, toNodeName string, storagePoolName string) error {
	ret := _m.Called(ctx, resName, fromNodeName, toNodeName, storagePoolName)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, resName, fromNodeName, toNodeName, storagePoolName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modify provides a mock function with given fields: ctx, resName, nodeName, props
func (_m *ResourceProvider) Modify(ctx context.Context, resName string, nodeName string, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, resName, nodeName, props)

	if len(ret) == 0 {
		panic("no return value specified for Modify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, resName, nodeName, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyConnection provides a mock function with given fields: ctx, resName, nodeAName, nodeBName, props
func (_m *ResourceProvider) ModifyConnection(ctx context.Context, resName string, nodeAName string, nodeBName string, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, resName, nodeAName, nodeBName, props)

	if len(ret) == 0 {
		panic("no return value specified for ModifyConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, resName, nodeAName, nodeBName, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyDRBDProxy provides a mock function with given fields: ctx, resName, props
func (_m *ResourceProvider) ModifyDRBDProxy(ctx context.Context, resName string, props client.DrbdProxyModify) error {
	ret := _m.Called(ctx, resName, props)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDRBDProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.DrbdProxyModify) error); ok {
		r0 = rf(ctx, resName, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyVolume provides a mock function with given fields: ctx, resName, nodeName, volNr, props
func (_m *ResourceProvider) ModifyVolume(ctx context.Context, resName string, nodeName string, volNr int, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, resName, nodeName, volNr, props)

	if len(ret) == 0 {
		panic("no return value specified for ModifyVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, resName, nodeName, volNr, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryMaxVolumeSize provides a mock function with given fields: ctx, filter
func (_m *ResourceProvider) QueryMaxVolumeSize(ctx context.Context, filter client.AutoSelectFilter) (client.MaxVolumeSizes, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for QueryMaxVolumeSize")
	}

	var r0 client.MaxVolumeSizes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.AutoSelectFilter) (client.MaxVolumeSizes, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.AutoSelectFilter) client.MaxVolumeSizes); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(client.MaxVolumeSizes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.AutoSelectFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreSnapshot provides a mock function with given fields: ctx, origResName, snapName, snapRestoreConf
func (_m *ResourceProvider) RestoreSnapshot(ctx context.Context, origResName string, snapName string, snapRestoreConf client.SnapshotRestore) error {
	ret := _m.Called(ctx, origResName, snapName, snapRestoreConf)

	if len(ret) == 0 {
		panic("no return value specified for RestoreSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.SnapshotRestore) error); ok {
		r0 = rf(ctx, origResName, snapName, snapRestoreConf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreVolumeDefinitionSnapshot provides a mock function with given fields: ctx, origResName, snapName, snapRestoreConf
func (_m *ResourceProvider) RestoreVolumeDefinitionSnapshot(ctx context.Context, origResName string, snapName string, snapRestoreConf client.SnapshotRestore) error {
	ret := _m.Called(ctx, origResName, snapName, snapRestoreConf)

	if len(ret) == 0 {
		panic("no return value specified for RestoreVolumeDefinitionSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.SnapshotRestore) error); ok {
		r0 = rf(ctx, origResName, snapName, snapRestoreConf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackSnapshot provides a mock function with given fields: ctx, resName, snapName
func (_m *ResourceProvider) RollbackSnapshot(ctx context.Context, resName string, snapName string) error {
	ret := _m.Called(ctx, resName, snapName)

	if len(ret) == 0 {
		panic("no return value specified for RollbackSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resName, snapName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResourceProvider creates a new instance of ResourceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceProvider {
	mock := &ResourceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
