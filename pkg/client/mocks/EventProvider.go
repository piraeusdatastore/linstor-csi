// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// EventProvider is an autogenerated mock type for the EventProvider type
type EventProvider struct {
	mock.Mock
}

// DRBDPromotion provides a mock function with given fields: ctx, lastEventId
func (_m *EventProvider) DRBDPromotion(ctx context.Context, lastEventId string) (*client.DRBDMayPromoteStream, error) {
	ret := _m.Called(ctx, lastEventId)

	var r0 *client.DRBDMayPromoteStream
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.DRBDMayPromoteStream); ok {
		r0 = rf(ctx, lastEventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DRBDMayPromoteStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lastEventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewEventProviderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventProvider creates a new instance of EventProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventProvider(t NewEventProviderT) *EventProvider {
	mock := &EventProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
