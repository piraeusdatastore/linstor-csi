// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ControllerProvider is an autogenerated mock type for the ControllerProvider type
type ControllerProvider struct {
	mock.Mock
}

// CreateSOSReport provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) CreateSOSReport(ctx context.Context, opts ...*client.ListOpts) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteErrorReports provides a mock function with given fields: ctx, del
func (_m *ControllerProvider) DeleteErrorReports(ctx context.Context, del client.ErrorReportDelete) error {
	ret := _m.Called(ctx, del)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ErrorReportDelete) error); ok {
		r0 = rf(ctx, del)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExternalFile provides a mock function with given fields: ctx, name
func (_m *ControllerProvider) DeleteExternalFile(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProp provides a mock function with given fields: ctx, prop
func (_m *ControllerProvider) DeleteProp(ctx context.Context, prop string) error {
	ret := _m.Called(ctx, prop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, prop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadSOSReport provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) DownloadSOSReport(ctx context.Context, opts ...*client.ListOpts) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetConfig(ctx context.Context, opts ...*client.ListOpts) (client.ControllerConfig, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 client.ControllerConfig
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) client.ControllerConfig); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(client.ControllerConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorReport provides a mock function with given fields: ctx, id, opts
func (_m *ControllerProvider) GetErrorReport(ctx context.Context, id string, opts ...*client.ListOpts) (client.ErrorReport, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 client.ErrorReport
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) client.ErrorReport); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		r0 = ret.Get(0).(client.ErrorReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorReports provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetErrorReports(ctx context.Context, opts ...*client.ListOpts) ([]client.ErrorReport, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []client.ErrorReport
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.ErrorReport); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ErrorReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorReportsSince provides a mock function with given fields: ctx, since, opts
func (_m *ControllerProvider) GetErrorReportsSince(ctx context.Context, since time.Time, opts ...*client.ListOpts) ([]client.ErrorReport, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, since)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []client.ErrorReport
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, ...*client.ListOpts) []client.ErrorReport); ok {
		r0 = rf(ctx, since, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ErrorReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, since, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalFile provides a mock function with given fields: ctx, name
func (_m *ControllerProvider) GetExternalFile(ctx context.Context, name string) (client.ExternalFile, error) {
	ret := _m.Called(ctx, name)

	var r0 client.ExternalFile
	if rf, ok := ret.Get(0).(func(context.Context, string) client.ExternalFile); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ExternalFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalFiles provides a mock function with given fields: ctx
func (_m *ControllerProvider) GetExternalFiles(ctx context.Context) ([]client.ExternalFile, error) {
	ret := _m.Called(ctx)

	var r0 []client.ExternalFile
	if rf, ok := ret.Get(0).(func(context.Context) []client.ExternalFile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ExternalFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProps provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetProps(ctx context.Context, opts ...*client.ListOpts) (client.ControllerProps, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 client.ControllerProps
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) client.ControllerProps); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ControllerProps)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropsInfos provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetPropsInfos(ctx context.Context, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []client.PropsInfo
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropsInfosAll provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetPropsInfosAll(ctx context.Context, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []client.PropsInfo
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSatelliteConfig provides a mock function with given fields: ctx, node
func (_m *ControllerProvider) GetSatelliteConfig(ctx context.Context, node string) (client.SatelliteConfig, error) {
	ret := _m.Called(ctx, node)

	var r0 client.SatelliteConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) client.SatelliteConfig); ok {
		r0 = rf(ctx, node)
	} else {
		r0 = ret.Get(0).(client.SatelliteConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: ctx, opts
func (_m *ControllerProvider) GetVersion(ctx context.Context, opts ...*client.ListOpts) (client.ControllerVersion, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 client.ControllerVersion
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) client.ControllerVersion); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(client.ControllerVersion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modify provides a mock function with given fields: ctx, props
func (_m *ControllerProvider) Modify(ctx context.Context, props client.GenericPropsModify) error {
	ret := _m.Called(ctx, props)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyExternalFile provides a mock function with given fields: ctx, name, file
func (_m *ControllerProvider) ModifyExternalFile(ctx context.Context, name string, file client.ExternalFile) error {
	ret := _m.Called(ctx, name, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ExternalFile) error); ok {
		r0 = rf(ctx, name, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifySatelliteConfig provides a mock function with given fields: ctx, node, cfg
func (_m *ControllerProvider) ModifySatelliteConfig(ctx context.Context, node string, cfg client.SatelliteConfig) error {
	ret := _m.Called(ctx, node, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.SatelliteConfig) error); ok {
		r0 = rf(ctx, node, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
