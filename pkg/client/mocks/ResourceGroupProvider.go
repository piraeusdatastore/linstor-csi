// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// ResourceGroupProvider is an autogenerated mock type for the ResourceGroupProvider type
type ResourceGroupProvider struct {
	mock.Mock
}

// Adjust provides a mock function with given fields: ctx, resGrpName, adjust
func (_m *ResourceGroupProvider) Adjust(ctx context.Context, resGrpName string, adjust client.ResourceGroupAdjust) error {
	ret := _m.Called(ctx, resGrpName, adjust)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ResourceGroupAdjust) error); ok {
		r0 = rf(ctx, resGrpName, adjust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdjustAll provides a mock function with given fields: ctx, adjust
func (_m *ResourceGroupProvider) AdjustAll(ctx context.Context, adjust client.ResourceGroupAdjust) error {
	ret := _m.Called(ctx, adjust)

	if len(ret) == 0 {
		panic("no return value specified for AdjustAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ResourceGroupAdjust) error); ok {
		r0 = rf(ctx, adjust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, resGrp
func (_m *ResourceGroupProvider) Create(ctx context.Context, resGrp client.ResourceGroup) error {
	ret := _m.Called(ctx, resGrp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ResourceGroup) error); ok {
		r0 = rf(ctx, resGrp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVolumeGroup provides a mock function with given fields: ctx, resGrpName, volGrp
func (_m *ResourceGroupProvider) CreateVolumeGroup(ctx context.Context, resGrpName string, volGrp client.VolumeGroup) error {
	ret := _m.Called(ctx, resGrpName, volGrp)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolumeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.VolumeGroup) error); ok {
		r0 = rf(ctx, resGrpName, volGrp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, resGrpName
func (_m *ResourceGroupProvider) Delete(ctx context.Context, resGrpName string) error {
	ret := _m.Called(ctx, resGrpName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, resGrpName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolumeGroup provides a mock function with given fields: ctx, resGrpName, volNr
func (_m *ResourceGroupProvider) DeleteVolumeGroup(ctx context.Context, resGrpName string, volNr int) error {
	ret := _m.Called(ctx, resGrpName, volNr)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolumeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, resGrpName, volNr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, resGrpName, opts
func (_m *ResourceGroupProvider) Get(ctx context.Context, resGrpName string, opts ...*client.ListOpts) (client.ResourceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resGrpName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 client.ResourceGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) (client.ResourceGroup, error)); ok {
		return rf(ctx, resGrpName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) client.ResourceGroup); ok {
		r0 = rf(ctx, resGrpName, opts...)
	} else {
		r0 = ret.Get(0).(client.ResourceGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resGrpName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, opts
func (_m *ResourceGroupProvider) GetAll(ctx context.Context, opts ...*client.ListOpts) ([]client.ResourceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []client.ResourceGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) ([]client.ResourceGroup, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.ResourceGroup); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ResourceGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropsInfos provides a mock function with given fields: ctx, opts
func (_m *ResourceGroupProvider) GetPropsInfos(ctx context.Context, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroup provides a mock function with given fields: ctx, resGrpName, volNr, opts
func (_m *ResourceGroupProvider) GetVolumeGroup(ctx context.Context, resGrpName string, volNr int, opts ...*client.ListOpts) (client.VolumeGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resGrpName, volNr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroup")
	}

	var r0 client.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, ...*client.ListOpts) (client.VolumeGroup, error)); ok {
		return rf(ctx, resGrpName, volNr, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, ...*client.ListOpts) client.VolumeGroup); ok {
		r0 = rf(ctx, resGrpName, volNr, opts...)
	} else {
		r0 = ret.Get(0).(client.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resGrpName, volNr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupPropsInfos provides a mock function with given fields: ctx, resGrpName, opts
func (_m *ResourceGroupProvider) GetVolumeGroupPropsInfos(ctx context.Context, resGrpName string, opts ...*client.ListOpts) ([]client.PropsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resGrpName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupPropsInfos")
	}

	var r0 []client.PropsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.PropsInfo, error)); ok {
		return rf(ctx, resGrpName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.PropsInfo); ok {
		r0 = rf(ctx, resGrpName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PropsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resGrpName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroups provides a mock function with given fields: ctx, resGrpName, opts
func (_m *ResourceGroupProvider) GetVolumeGroups(ctx context.Context, resGrpName string, opts ...*client.ListOpts) ([]client.VolumeGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resGrpName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroups")
	}

	var r0 []client.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) ([]client.VolumeGroup, error)); ok {
		return rf(ctx, resGrpName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*client.ListOpts) []client.VolumeGroup); ok {
		r0 = rf(ctx, resGrpName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.VolumeGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*client.ListOpts) error); ok {
		r1 = rf(ctx, resGrpName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modify provides a mock function with given fields: ctx, resGrpName, props
func (_m *ResourceGroupProvider) Modify(ctx context.Context, resGrpName string, props client.ResourceGroupModify) error {
	ret := _m.Called(ctx, resGrpName, props)

	if len(ret) == 0 {
		panic("no return value specified for Modify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ResourceGroupModify) error); ok {
		r0 = rf(ctx, resGrpName, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyVolumeGroup provides a mock function with given fields: ctx, resGrpName, volNr, props
func (_m *ResourceGroupProvider) ModifyVolumeGroup(ctx context.Context, resGrpName string, volNr int, props client.VolumeGroupModify) error {
	ret := _m.Called(ctx, resGrpName, volNr, props)

	if len(ret) == 0 {
		panic("no return value specified for ModifyVolumeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, client.VolumeGroupModify) error); ok {
		r0 = rf(ctx, resGrpName, volNr, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerySizeInfo provides a mock function with given fields: ctx, resGrpName, req
func (_m *ResourceGroupProvider) QuerySizeInfo(ctx context.Context, resGrpName string, req client.QuerySizeInfoRequest) (client.QuerySizeInfoResponse, error) {
	ret := _m.Called(ctx, resGrpName, req)

	if len(ret) == 0 {
		panic("no return value specified for QuerySizeInfo")
	}

	var r0 client.QuerySizeInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.QuerySizeInfoRequest) (client.QuerySizeInfoResponse, error)); ok {
		return rf(ctx, resGrpName, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.QuerySizeInfoRequest) client.QuerySizeInfoResponse); ok {
		r0 = rf(ctx, resGrpName, req)
	} else {
		r0 = ret.Get(0).(client.QuerySizeInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.QuerySizeInfoRequest) error); ok {
		r1 = rf(ctx, resGrpName, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Spawn provides a mock function with given fields: ctx, resGrpName, resGrpSpwn
func (_m *ResourceGroupProvider) Spawn(ctx context.Context, resGrpName string, resGrpSpwn client.ResourceGroupSpawn) error {
	ret := _m.Called(ctx, resGrpName, resGrpSpwn)

	if len(ret) == 0 {
		panic("no return value specified for Spawn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ResourceGroupSpawn) error); ok {
		r0 = rf(ctx, resGrpName, resGrpSpwn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResourceGroupProvider creates a new instance of ResourceGroupProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceGroupProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceGroupProvider {
	mock := &ResourceGroupProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
