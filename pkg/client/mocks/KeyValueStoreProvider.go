// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/LINBIT/golinstor/client"

	mock "github.com/stretchr/testify/mock"
)

// KeyValueStoreProvider is an autogenerated mock type for the KeyValueStoreProvider type
type KeyValueStoreProvider struct {
	mock.Mock
}

// CreateOrModify provides a mock function with given fields: ctx, kv, modify
func (_m *KeyValueStoreProvider) CreateOrModify(ctx context.Context, kv string, modify client.GenericPropsModify) error {
	ret := _m.Called(ctx, kv, modify)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.GenericPropsModify) error); ok {
		r0 = rf(ctx, kv, modify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, kv
func (_m *KeyValueStoreProvider) Delete(ctx context.Context, kv string) error {
	ret := _m.Called(ctx, kv)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, kv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, kv
func (_m *KeyValueStoreProvider) Get(ctx context.Context, kv string) (*client.KV, error) {
	ret := _m.Called(ctx, kv)

	var r0 *client.KV
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.KV); ok {
		r0 = rf(ctx, kv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.KV)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *KeyValueStoreProvider) List(ctx context.Context) ([]client.KV, error) {
	ret := _m.Called(ctx)

	var r0 []client.KV
	if rf, ok := ret.Get(0).(func(context.Context) []client.KV); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.KV)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewKeyValueStoreProviderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyValueStoreProvider creates a new instance of KeyValueStoreProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyValueStoreProvider(t NewKeyValueStoreProviderT) *KeyValueStoreProvider {
	mock := &KeyValueStoreProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
